#### Creating Kubernetes Cluster ####
-------------------------------
# STEP 1 > Prepare the System
1) Give proper Hostname
master node - kmaster
worker nodes - knode1, knode2

sudo hostnamectl set-hostname kmaster
sudo hostnamectl set-hostname knode1
sudo hostnamectl set-hostname knode2

2) edit /etc/hosts file
  --> get ip of all the machines
  --> sudo vim /etc/hosts
add the below on each nodes

172.31.127.152 kmaster 
172.31.116.181 knode1  
172.31.120.22 knode2



  # Log out of all three servers and log back in to see these changes take effect

# On all nodes, set up Cri-o container runtime. You will need to load some kernel modules and modify some system settings as part of this
process


cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

# sysctl params required by setup, params persist across reboots

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

# Apply sysctl params without reboot

sudo sysctl --system

https://devopsforu.com/how-to-install-kubernetes-1-27/

# On all nodes, disable swap.

sudo swapoff -a

# Disable firewall 

# check current status

sudo ufw status

# Disable firewall

sudo ufw disable


Step 2: Install Container Engine

-----------------------------------------------------
# INSTALL CRIO
# Add required environment variables:


export OS_VERSION_ID=xUbuntu_$(cat /etc/os-release | grep VERSION_ID | awk -F"=" '{print $2}' | tr -d '"')
export CRIO_VERSION=1.25

# Add repository:
echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS_VERSION_ID/ /"|sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
echo "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$CRIO_VERSION/$OS_VERSION_ID/ /"|sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:$CRIO_VERSION.list
curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$CRIO_VERSION/$OS_VERSION_ID/Release.key | sudo apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add -
curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS_VERSION_ID/Release.key | sudo apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add -


# Update package index and install Cri-o:

sudo apt-get update
sudo apt-get install cri-o cri-o-runc cri-tools -y

# Enable and start Cri-o:

sudo systemctl daemon-reload
sudo systemctl enable crio --now

------------------------------------------------------------------------------------------

# On all nodes, install kubeadm, kubelet, and kubectl

# Add Kubernetes Repository

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

# Update package index and install Kubernetes components:

sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl

sudo apt-mark hold kubelet kubeadm kubectl

# On the control plane node only, initialize the cluster and set up kubectl access

sudo kubeadm init --pod-network-cidr 192.168.0.0/16 --kubernetes-version 1.27.0

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Verify the cluster is working

kubectl get nodes

# Install the Calico network add-on

kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml

# Get the join command (this command is also printed during kubeadm init . Feel free to simply copy it from there)

kubeadm token create --print-join-command

# Copy the join command from the control plane node. Run it on each worker node as root (i.e. with sudo )

sudo kubeadm join ...

# On the control plane node, verify all nodes in your cluster are ready. Note that it may take a few moments for all of the nodes to
enter the READY state

kubectl get nodes



